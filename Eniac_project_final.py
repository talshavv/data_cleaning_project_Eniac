# -*- coding: utf-8 -*-
"""Eniac - combined tables - exploring.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Vsi-Lk6D-zBwThE3Ns1O1xoWXV6Ww8we

# Combined tables and exploration
Let's see if the data in the various tables matches up

## 0.&nbsp;Import all tables
"""

import pandas as pd
import numpy as np
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")
import matplotlib.pyplot as plt


def google_drive_url(share_url):
  id=share_url.split('/')[-2]
  return 'https://drive.google.com/uc?export=download&id='+ id

orderlines_cleaned_url = 'https://drive.google.com/file/d/1CsiuiAJm7s-gR4F8S_i54dba2fusAzgk/view?usp=sharing'
order_lines = pd.read_csv(google_drive_url(orderlines_cleaned_url))

orders_cleaned_url = 'https://drive.google.com/file/d/18R5D5HQFjfyhD1mtr_pZucggfwZDENMG/view?usp=sharing'
orders = pd.read_csv(google_drive_url(orders_cleaned_url))

products_cleaned_url = 'https://drive.google.com/file/d/1lILhO4cdLMW9Ge1exo_973-j5ZJiDYSM/view?usp=sharing'
products = pd.read_csv(google_drive_url(products_cleaned_url))

brands_cleaned_url = 'https://drive.google.com/file/d/1TqZ7ZG7G5ppdzYpQexCXGWDOiOB5MJ2J/view?usp=sharing'
brands = pd.read_csv(google_drive_url(brands_cleaned_url))

"""### Set official Eniac Pallete for Seaborn

"""

eniac_colors = sns.color_palette(['#105c52','#126b5f','#157a6d','#178a7a','#31a394','#48ada0','#5fb8ac','#76c2b8','#8dccc4','#a3d6cf','#bae0db','#d1ebe7',
                                   '#f7bb99','#f5ab80','#f39a66','#f1894d','#ef7833','#ed6719','#d44d00','#bc4500','#a53c00','#8d3400','#d1ebe7','#bae0db'])
sns.set_palette(eniac_colors)

"""## 1.&nbsp;Orders & Orderlines

### set date types correctly
"""

order_lines['date'] = pd.to_datetime(order_lines['date'])
order_lines.info()

orders['created_date'] = pd.to_datetime(orders['created_date'])
orders.info()

full_order_lines = pd.merge(order_lines, orders, on='order_id')
full_order_lines.info()

full_order_lines.isna().value_counts()

"""- We currently don't care about the order_value

### Filter by completed orders
"""

full_completed_order_lines = full_order_lines.loc[full_order_lines['state'] == 'Completed'].copy()
full_completed_order_lines

"""## 2.&nbsp;Orderlines and Products"""

products.info()
if 'desc' in products.columns:
  products = products.drop(columns=['promo_price', 'desc'])
if 'brand' in products.columns:
  products = products.rename(columns={'brand':'brand_id'})
products

order_lines_products = pd.merge(full_completed_order_lines, products, on='sku')
order_lines_products = pd.merge(order_lines_products, brands, on='brand_id')
order_lines_products.head()

order_lines_products.isna().value_counts()

"""- ~description has null values ==> we don't care about it this far~
- ~type has 170 null values ==> does it matter?~
- type has 13 null falues, we'll fillin later

### Order line value
Calculate the value of each orderline
"""

order_lines_products['orderline_value'] = order_lines_products['quantity'] * order_lines_products['unit_price']

"""### Revenue by month"""

from pandas.tseries.offsets import MonthBegin
order_lines_products['month'] = order_lines_products['date'].dt.to_period('M')
revenue_by_month = (order_lines_products
                    .groupby('month')
                    .orderline_value.sum()
                    .reset_index()
)
revenue_by_month
# sns.catplot(data=revenue_by_month
#             ,kind='bar'
#             ,x='month'
#             ,y='orderline_value'
#             )
(revenue_by_month
    .plot.bar(x='month'
              ,y='orderline_value'
              , color='r'
              , figsize=(12,4)
    )
);
plt.title('Revenue by Month')

"""### Look at product types

How many different types are there
"""

order_lines_products['type'].nunique()

"""#### Clean unknown types

"""

order_lines_products['type'] = order_lines_products['type'].fillna('0')

"""### Product types by quantity"""

( order_lines_products
   .groupby('type')
   .quantity.sum()
   .plot(
       kind='bar'
       ,x='type'
       ,y='quantity'
       , figsize=(30,4)
    )
);

"""### Product Types by revenue"""

( order_lines_products
   .groupby('type')
   .orderline_value.sum()
   .plot(
       kind='bar'
       ,x='type'
       ,y='quantity'
       , figsize=(30,4)
    )
);

"""### How many total items are sold?"""

order_lines_products.quantity.sum()

most_sold_categories = order_lines_products.groupby('type').quantity.sum().nlargest(20).reset_index()
most_sold_categories['popular_demand'] = most_sold_categories.quantity.cumsum()
most_sold_categories

most_sold_categories.plot(kind='bar', x='type', y='quantity', figsize=(30,4));

"""#### Which items make us the most revenue?"""

order_lines_products.orderline_value.sum().round(2)

"""==> total orderline items revenue = 8.3 Mio (does nto include shipping, etc.)"""

highest_revenue_categories = (order_lines_products
                               .groupby('type')
                               .orderline_value.sum()
                               .nlargest(20)
                               .reset_index()
)
highest_revenue_categories['cumulative_revenue'] = highest_revenue_categories.orderline_value.cumsum()
highest_revenue_categories = highest_revenue_categories.rename(columns={'type':'cat_id', 'orderline_value':'category_revenue'})
highest_revenue_categories['cat_id'] = pd.Categorical(highest_revenue_categories['cat_id'], ordered=True,
                   categories=highest_revenue_categories['cat_id'])
highest_revenue_categories

"""The 20 top categories here, make 6.2 Mio out of 8.3 million, so ~ 75% of revenue.

### Adding Categories Names

Listing products in various category names, to eye what categery this might be.

There is a better way to do this (below), after we converted these lists into a list of category_ids
"""

pd.set_option('display.max_colwidth', None)
# order_lines_products.loc[order_lines_products['type'] == '13615399', 'name'].unique()
# top 20 categories by frequency of product 11865403, 11935397, 11905404, 1364, 5384,12215397,12655397,12585395,1296,1230,12175397,1405,1231,1325,13835403,12755395,42945397,13555403,13855401,13615399
# top 20 categories by quantiy sold of product 11865403, 11935397, 11905404, 1364, 12655397,5384,12215397,12585395,1230,1296,12175397,1405,1325,1231,12755395,13835403,13855401,42945397,13555403,13615399
# top 20 categories by orderline_value of product 12215397, 1364, 12655397, 51601716, 11905404, 5384, 1405, 113291716, 85641716, 113281716, 1433, 2,17E+11, 106431714, 24895185, 85651716, 5398, 1282
# pd.set_option('display.max_colwidth', 50)

"""createing a category data frame from the research above"""

category_ids=['0', '11865403', '11935397', '11905404', '1364',
              '12215397', '5384', '12585395', '1230', '1296', 
              '12175397', '1405', '1231', '1325', '13835403', 
              '12755395', '42945397', '13555403','13855401', '13615399',
              '51601716', '113291716', '85641716', '113281716', '1433',
              '2,17E+11', '106431714', '24895185', '85651716', '5398',
              '1282']
category_names=['Other Items' ,'iPhone cases', 'Data Storage', 'Cell Phone Accessories', 'Mac Memory',
                'SSD', 'Wireless Headphones', 'USB Cables', 'iPhone Cables (Lightning)', 'Computer Monitors', 
                'Storage Servers', 'Graphics Tablet', 'Apple Care', 'Adapter Cables', 'MacBook Sleeves',
                'Mac Storage Adapters', 'Flash Drives', 'Screen Protectors', 'Mac Keyboards', 'Chargers',
                'Other iPhones','iPhone 8','iPhone 7','iPhone 8 Plus','SSD Kits',
                'Apple MacBook Air 13"', 'Apple IPad Pro','Apple Watch', 'iPhone 7 Plus','Portable Speakers',
                'Apple Mac Desktop']
categories = pd.DataFrame({
    'cat_id': category_ids,
    'cat_name': category_names
    }
)
categories

"""##### Create a list of all items for the category_ids defined above"""

for id in category_ids[20:]: # only look at the new ones
  print(f"=== {id} ====================================")
  print(order_lines_products.loc[order_lines_products['type'] == id, 'name'].unique())

"""I also looked at the Nan (now category '0') and they seemed to be iPhone 6s by in large
```
=== 0 ====================================
['Apple iPhone 64GB Silver' 'Apple iPhone 6s Plus 128GB Gold'
 'Apple iPhone 16GB Rose Gold' 'Apple iPhone 16GB Gold'
 'Apple iPhone 6s Plus 128GB Space Gray'
 'Apple iPhone 6s Plus 128GB Rose Gold'
 'Apple iPhone 6s Plus 128GB Silver' 'Elgato Video Capture Mac'
 'Dodocool Sports Wireless Stereo Headphones Black']
 ```
 However, as they make not much revenue, it should be fine to ignore.

### Category Hierarchy
"""



"""### Merge category texts into order_lines_products
... Also fill in all other items with "Other items" as category name
"""

pd.set_option('display.max_colwidth', 50)
if 'cat_id' not in order_lines_products.columns:
  order_lines_products = pd.merge(order_lines_products, categories, how='left', left_on='type', right_on='cat_id')
  order_lines_products['cat_id'] = order_lines_products['cat_id'].fillna(order_lines_products['type'])
  order_lines_products['cat_name'] = order_lines_products['cat_name'].fillna(value=categories.iloc[0, 1])
order_lines_products

"""### Most sold (quantities) categories"""

if 'cat_id' not in most_sold_categories.columns:
  most_sold_categories = pd.merge(most_sold_categories, categories, how='inner', left_on='type', right_on='cat_id') # on='cat_id'
sns.catplot(kind='bar',
            data=most_sold_categories, 
            y="cat_name", 
            x="quantity", 
            # hue="type",
            palette=eniac_colors,
            height=8, 
            aspect=3
            );
# most_sold_categories

"""### Highest revenue categories"""

if 'cat_name' not in highest_revenue_categories.columns:
  highest_revenue_categories = pd.merge(highest_revenue_categories, categories, how='inner', on='cat_id')

sns.catplot(kind='bar',
            data=highest_revenue_categories, 
            y="cat_name", 
            x="category_revenue", 
            # hue="type",
            palette=eniac_colors,
            height=8, 
            aspect=3
);

"""## 3.&nbsp;Calculate Discounts"""

order_lines_products.info()

order_lines_products['unit_discount'] = order_lines_products['price'] - order_lines_products['unit_price']
order_lines_products['discount'] = order_lines_products['unit_discount'] * order_lines_products['quantity']

order_lines_products.tail(10)

"""### Calculate Discount Percentage"""

order_lines_products['discount_percentage'] = round(order_lines_products['unit_discount'] / order_lines_products['price'] * 100, 1)
order_lines_products.head(3)

order_lines_products[order_lines_products['discount'] < 0.0]

"""## 4.&nbsp;Orders accepted / completed by month"""

# orders.created_date.hist(figsize=(20,15), bins = 100);
# order_by_month = orders['created_date'].dt.to_period('M').reset_index()

# order_by_month['created_date'] = order_by_month['created_date'].dt.to_timestamp()
# order_by_month['created_date'].hist(figsize=[12,9], bins=15); # this gives a bad output

order_counts_by_month = (
    orders
    .groupby(orders['created_date']
    .dt.to_period('M'))
    .order_id.count()
    .reset_index()
)
order_counts_by_month.plot.bar(x='created_date', y='order_id', figsize=(12,4));
plt.title('Order by Month')

(    orders[orders['state'] == 'Completed']
    .groupby(orders['created_date']
    .dt.to_period('M'))
    .order_id.count()
    .reset_index()
    .plot.bar(x='created_date', y='order_id', color='g', figsize=(12,4))
);
plt.title('Completed Orders by Month')

"""## 5.&nbsp;Average discount % by month

"""

order_lines_by_month = order_lines_products.loc[order_lines_products['discount_percentage'] > 0.0, 'date'].dt.to_period('M').reset_index()
order_lines_by_month

order_lines_by_month['date'] = order_lines_by_month['date'].dt.to_timestamp()
# order_lines_by_month['date'].hist(figsize=[12,9], bins=15); # this gives a bad output

undiscounted_order_lines = order_lines_products.loc[order_lines_products['discount_percentage'] > 0.0]
discounts_by_month = (
    undiscounted_order_lines
    .groupby(order_lines_products['date'].dt.to_period('M'))
    .discount_percentage.mean()
    .reset_index()
)
discounts_by_month.plot.bar(x='date', y='discount_percentage', figsize=(12,4));

(    orders[orders['state'] == 'Completed']
    .groupby(orders['created_date']
    .dt.to_period('M'))
    .order_value.sum()
    .reset_index()
    .plot.bar(x='created_date', y='order_value', figsize=(12,4))
);

"""### How many products are sold at full price?"""

(order_lines_products['price'] == order_lines_products['unit_price']).value_counts()

"""Dicounted products : 53928

Price matches with unit price :2334
"""

order_lines_products_discounts = order_lines_products[order_lines_products['discount'] >  0.0]

"""### What brand products receive the highest relative discount?"""

(order_lines_products_discounts
    .groupby('brand_name')
    .discount_percentage.mean()
    .nlargest(25)
    .plot(kind ='bar', color = ['r','y','g']));

"""## 6.&nbsp;Total discount by category"""

discount_df = (order_lines_products
                               .groupby('type')
                               .discount.sum()
                               .reset_index())
discount_df = discount_df.rename(columns={'discount':'category_discount', 'type': 'cat_id'})    

if 'category_discount' not in highest_revenue_categories.columns:
  highest_revenue_categories = pd.merge(highest_revenue_categories, discount_df, on='cat_id', how='inner').round(2)
  highest_revenue_categories['potential_revenue'] = highest_revenue_categories.category_revenue + highest_revenue_categories.category_discount
highest_revenue_categories

if 'cat_name' not in highest_revenue_categories.columns:
  highest_revenue_categories = pd.merge(highest_revenue_categories, categories, how='inner', on='cat_id')

sns.set_theme(style="whitegrid")
f, ax = plt.subplots(figsize=(15, 8))
sns.set_color_codes("muted")

sns.barplot(x="potential_revenue", 
            y="cat_name", 
            data=highest_revenue_categories,
            label="Discount", 
            color="orangered")
sns.barplot(x="category_revenue", 
            y="cat_name", 
            data=highest_revenue_categories,
            label="Revenue", 
            color="teal")

ax.legend(ncol=2, loc="lower right", frameon=True)
ax.set(ylabel="Category",
       xlabel="Revenue")

sns.despine(left=True, bottom=True)

order_lines_products['discount_percentage'].describe()

# [4]

order_lines_products.columns

# Interquartile range
q1 = order_lines_products['discount_percentage'].describe()[4]
q3 = order_lines_products['discount_percentage'].describe()[6]
iqr = q3 - q1

reasonable_order_lines_products = order_lines_products #.loc[(order_lines_products["discount_percentage"] > q1 - (1.5 * iqr)) & (order_lines_products["discount_percentage"] < q3 + (1.5 * iqr)), :]
if 'type' in reasonable_order_lines_products.columns:
  reasonable_order_lines_products = reasonable_order_lines_products.drop('type', axis=1)

# highest_revenue_categories['cat_id'] = pd.Categorical(highest_revenue_categories['cat_id'], ordered=True,
                  #  categories=highest_revenue_categories['cat_id'])
if 'category_revenue' not in reasonable_order_lines_products.columns:
  reasonable_order_lines_products = pd.merge(reasonable_order_lines_products, highest_revenue_categories, how='inner', on=['cat_id','cat_name'])
reasonable_order_lines_products.columns, highest_revenue_categories.columns
reasonable_order_lines_products = reasonable_order_lines_products.sort_values('category_revenue', ascending=False)
reasonable_order_lines_products.columns

f, ax = plt.subplots(figsize=(15, 8))

sns.boxplot(data=reasonable_order_lines_products
            ,y="cat_name"
            ,x="discount_percentage"
            ,showfliers=False
            ,palette=eniac_colors
)
sns.despine(offset=10, trim=True)

"""## 7.&nbsp;Discount Persentage over time (for the best selling categories)"""

reasonable_order_lines_products.columns

reasonable_order_lines_products['month'] = reasonable_order_lines_products["date"].dt.to_period('M')

cat_names = reasonable_order_lines_products['cat_name'].unique()
for cat in cat_names: 
  koo = (reasonable_order_lines_products[reasonable_order_lines_products['cat_name'] == cat]
        .groupby('month', sort=True)
        .discount.sum()
        .reset_index() 
        )
  sns.catplot( data = koo
              , kind = 'point',
            x = 'month',
            y = 'discount'
            ,height=6
            ,aspect=2
            ,pallette=eniac_colors
  )
  plt.title(cat)
  plt.show()

"""## 8.&nbsp;Discount vs revenue over time"""

reasonable_order_lines_products.columns

import datetime as dates

reasonable_order_lines_products['month'] = reasonable_order_lines_products["date"].dt.to_period('M')
months = reasonable_order_lines_products['month'].unique()

cat_names = reasonable_order_lines_products['cat_name'].unique()[:]
for cat in cat_names:
  koo = (reasonable_order_lines_products[reasonable_order_lines_products['cat_name'] == cat]
            .groupby('month')
            .orderline_value.sum()
            .reset_index() 
        )
  missing = set(months) - set(list(koo['month']))
  for m in missing:
    koo = koo.append({'month': m, 'orderline_value': 0}, ignore_index=True).sort_values(by='month').reset_index(drop=True)
      
  koo_d = (reasonable_order_lines_products[reasonable_order_lines_products['cat_name'] == cat]
            .groupby('month')
            .discount_percentage.mean()
            .reset_index()
  )
  missing = set(months) - set(list(koo_d['month']))
  for m in missing:
    koo_d = koo_d.append({'month': m, 'discount_percentage': 0}, ignore_index=True).sort_values(by='month').reset_index(drop=True)
  koo = pd.merge(koo, koo_d, how='inner', on='month')
  fig, ax_l = plt.subplots(figsize=(20,8))
  ax_r = ax_l.twinx()
  ax_r.set_ylim(0, 50)
  ax_r.set_ylim(0, 50)
  ax_l.set_ylim(0, 140000)
  # ax_r.grid(False)
  ax_l.grid(False)
  
  lineplot = sns.pointplot(data = koo
      ,x=np.arange(0,len(koo))
      ,y='discount_percentage'
      ,ax=ax_r
      ,color='orangered'
    )
  lineplot.set(ylabel='Avg. Discount %');
  barplot = sns.barplot( data = koo
            ,x = 'month'
            ,y = 'orderline_value'
            ,ax=ax_l
            ,palette=eniac_colors
  )
  x_dates = koo['month'].unique().strftime('%b')
  ax_l.set_xticklabels(labels=x_dates)
  barplot.set(xlabel='Month', ylabel='Revenue');

  sns.despine(offset=10, trim=True)

  plt.title(cat)
  plt.show()
# koo

months

koo

"""## 9.&nbsp;Professional vs Consumer Categories """

consumer_categories = ['iPhone 8', 'iPhone 7', 'iPhone 8 Plus', 'iPhone 7 Plus', 'Apple Watch', 'Apple MacBook Air 13"', 'Portable Speakers', 'Other iPhones', 'Cell Phone Accessories', 'Wireless Headphones']
business_categories = ['Data Storage', 'Computer Monitors', 'Storage Servers', 'SSD Kits', 'Apple IPad Pro', 'Apple Mac Desktop', 'Mac Memory','Graphics Tablet', 'SSD']

# highest_revenue_categories['level_1_cat'] = 'Other'
def get_consumer_type(row):
  cat_name = row['cat_name']
  if cat_name in consumer_categories:
    return 'Consumer'
  if cat_name in business_categories:
    return 'Business'
  else:
    return'Other'
    
highest_revenue_categories['customer_type'] = highest_revenue_categories.apply(get_consumer_type, axis=1)
highest_revenue_categories['discount_percentage'] = highest_revenue_categories['category_discount'] / highest_revenue_categories['category_revenue'] * 100
highest_revenue_categories

highest_revenue_categories

y_value = 'category_discount'
# y_value = 'discount_percentage'
relplot = sns.relplot(kind='scatter'
            ,data=highest_revenue_categories.rename(columns={'customer_type':'Customer Type'})
            ,x='category_revenue'
            ,y=y_value
            ,s=1000
            ,hue='Customer Type'
            # ,palette=eniac_colors
            ,palette=sns.color_palette(['teal','orangered'])
            ,height=6
            ,aspect=1.5
            );
relplot.set(xlabel='Revenue', ylabel='Discount Level');
ax = relplot.axes[0,0]
for idx,row in highest_revenue_categories.iterrows():
  if row['cat_name'] in (['Data Storage', 'Cell Phone Accessories']):
    cat_name = row['cat_name']
  else:
    cat_name = ""
  x = row['category_revenue'] + 25000
  y = row[y_value]
  text = cat_name
  ax.text(x,y,text, horizontalalignment='left')
sns.despine(offset=10, trim=True);

"""## 10.&nbsp;Sales vs Discount by categories

"""

highest_revenue_categories

sns.relplot(kind='scatter'
            ,data=highest_revenue_categories
            ,x='category_revenue'
            ,y='category_discount'
            ,s=1000
            ,hue='cat_name'
            ,height=6
            ,aspect=3
            );

"""## 11.&nbsp;Year over Year Comparison"""

foo = order_lines_products['m'].unique() #.sort()
foo
order_lines_products['m'].unique() # .isin([1,2,3])

order_lines_products['m'] = order_lines_products['date'].dt.month
order_lines_products['y'] = order_lines_products['date'].dt.year
revenue = (order_lines_products[order_lines_products['m'].isin([1,2,3])]
                    .groupby(['y', 'm'])
                    .orderline_value.sum()
                    .reset_index()
)
# (order_lines_products
#                     .groupby(['y', 'm'])
#                     .discount_percentage.mean()
#                     .reset_index()
# )['discount_percentage']
revenue['average_discount_percentage'] = (order_lines_products[order_lines_products['m'].isin([1,2,3])]
                    .groupby(['y', 'm'])
                    .discount_percentage.mean()
                    .reset_index()
)['discount_percentage'].round(1)
missing = set(revenue['m'].unique()) - set(list(revenue.loc[revenue['y'] == 2018, 'm']))
# missing
for m in missing:
  revenue = (revenue.append(
      {'y': 2018, 'm': m,  'orderline_value': 0, 'average_discount_percentage': 0}
      , ignore_index=True)
      .sort_values(by=['y','m'])
      .reset_index(drop=True)
  )

# revenue 
fig, ax_l = plt.subplots( figsize=(8,8))
# colors = ['#105c52'
#          ,'#126b5f','#157a6d','#178a7a','#31a394','#48ada0','#5fb8ac','#76c2b8','#8dccc4','#a3d6cf','#bae0db','#d1ebe7'
#          ,'#2f1100'
#          ,'#471a00','#5e2200','#762b00','#8d3400','#a53c00','#bc4500','#d44d00','#ed6719','#ef7833','#f1894d','#f39a66']
colors=['teal','orangered']
sns.set_palette(sns.color_palette(colors))
ax_r = ax_l.twinx()
ax_r.set_ylim(0, 50)
ax_r.grid(False)
ax_l.grid(False)
barplot = sns.barplot(data = revenue
            ,x = 'm'
            ,y = 'orderline_value'
            ,hue = 'y'
            ,ax=ax_l
)
barplot.set(xlabel='Month', ylabel='Revenue')

r2017 = revenue[revenue['y'] == 2017]
r2018 = revenue[revenue['y'] == 2018]
sns.pointplot(data = r2017
    ,x=np.arange(0,len(r2017.m))
    ,y='average_discount_percentage'
    # ,hue = 'y'
    ,color='lightseagreen'
    ,ax=ax_r
  )


discountplot = sns.pointplot(data = r2018
    ,x=np.arange(0,len(r2018.m))
    ,y='average_discount_percentage'
    # ,hue = 'y'
    ,color='orange'
    ,ax=ax_r
  )
discountplot.set(ylabel='Discount %')
sns.despine(offset=10, trim=True)

#   plt.title(cat)
#   plt.show()

"""## 100.&nbsp; ToDo
- [x] replace the imports with the cleaned tables, so the code is more re-usable in the future
- [x] Rework the 'discounts, based on cleaned tables
- [x] Calculate percentage discounts
- [x] How many prices match between product and unit_price sold
- [x] How does the picture look like, when filtering only for orders that are completed?
- [x] Look at historgram over time
- [x] Look at discounts over time
- [ ] Group orders lines by brand
- [ ] Group order lines by type
  - [x] Give types a category name (started; top )
- [x] Fix the column description (a few null)? ==> dropped
- [ ] Drop "wholesale" orders?
- [ ] Check correlation between seasonality and brand or type of product
- [ ] Make pretty graphs and histograms (funnel diagram)
- [ ] Inspect (funnel diagram) order created_date vs. order_line date
- [ ] 
### Solved somewhere else
- [x] Does order_lines match the total paid?
- [x] Drop column 'promo_price'

# Objectives

* How products should be classified into different categories to simplify reports and analysis?
* What is the distribution of product prices across different categories.
* How many products are being discounted?
* How big are the offered discounts as a percentage of the product prices?
* How seasonality and special dates (Christmas, Black Friday) affect sales?
* How could data collection be improved? 
* Are discounts good for sales? 

* Giving input to other departments as conbclusion (f.e Marketing department - about discounts and the way they are made/distributed) 

* What is the time period that the dataset covers? 15 Months (Jan 2017 - March 2018)
* What is the overall revenue for that time? Completed 15m
* Are there seasonal patterns in the evolution of sales? 
* What are the most sold products? Category of iPhone cases 
* What are the products that generate the most revenue?
"""
